const fs = require('fs');
const mongoose = require('mongoose');
const logRouter = require('../routes/logRoutes');
const Log = require('../models/logModel');
const { Types } = require('mongoose');
const filePath = './dev-data/logs-simple.json';
const logs = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
const catchAsync = require('./../utils/catchAsync');

exports.getAllLogs = catchAsync(async (req, res, next) => {
  // Set default values for page and pageSize
  const page = parseInt(req.query.page, 10) || 1;
  const pageSize = parseInt(req.query.pageSize, 10) || 10;

  // Calculate the skip based on the page and pageSize
  const skip = (page - 1) * pageSize;

  try {

    let query = {};
    // Check if query is provided
    if (req.query.location) {
      const locationRegex = new 
      RegExp(req.query.location, 'i');
      query = { location: { $regex: locationRegex } };
    }    
    
    // Find all logs with pagination
    const logs = await Log.find(query).skip(skip).limit(pageSize).sort({createdAt: -1 });

    // Calculate the total number of logs
    const totalLogs = await Log.countDocuments(query);

    // Send response with pagination information
    res.status(200).json({
      status: 'Success',
      data: {
        results: logs.length,
        logs,
        page,
        pageSize,
        totalLogs,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: 'fail',
      message: err.message,
    });
  }
});

exports.getLog = catchAsync(async (req, res, next) => {
  try {
    const log = await Log.findById(req.params.id);
    if (!log) {
      return res.status(404).json({
        status: 'fail',
        message: 'Log not found',
      });
    }
    res.status(200).json({
      status: 'success',
      data: {
        log,
      },
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: error.message,
    });
  }
});

exports.createLog = catchAsync(async (req, res, next) => {
  try {
    const userId = req.body.userId;
    const newLog = await Log.create({
      // id will be automatically generated by MongoDB
        location: req.body.location,
        date: req.body.date,
        timeOff: req.body.timeOff,
        timeBackOn: req.body.timeBackOn,
        userId: userId
    });
    newLog.save().then(result => {
      res.status(201).json({
        status: 'Success',
        data: {
          log: result,
        }
      })
    })
  } catch (err) {
    res.status(400).json({
      status: 'fail',
      message: err.message,
    });
  }
});

exports.updateLog = catchAsync(async (req, res, next) => {
  try {
    const log = await Log.findByIdAndUpdate(req.params.id, req.body);
    if (!log) {
      return res.status(404).json({
        status: 'fail',
        message: 'log not found',
      });
    }
    res.status(200).json({
      status: 'success',
      data: {
        log,
      },
    });
  } catch (err) {
    res.status(400).json({
      status: 'fail',
      message: err.message,
    });
  }
});

exports.deleteLog = catchAsync(async (req, res, next) => {
  try {
    const log = await Log.findByIdAndDelete(req.params.id);
    if (!log) {
      return res.status(404).json({
        status: 'fail',
        message: 'Log not found',
      });
    }
    res.status(200).json({
      status: 'success',
      data: null,
    });
  } catch (err) {
    res.status(400).json({
      status: 'fail',
      message: err.message,
    });
  }
});

